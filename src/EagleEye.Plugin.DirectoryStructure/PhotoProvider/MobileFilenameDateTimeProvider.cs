namespace EagleEye.DirectoryStructure.PhotoProvider
{
    using System;
    using System.IO;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;

    using EagleEye.Core.Data;
    using EagleEye.Core.Interfaces.PhotoInformationProviders;
    using JetBrains.Annotations;

    /// <summary>
    /// This DateTime provider uses relies on filenames generated by mobile phones etc.
    /// ie:
    ///  "IMG-20170325-WA0014.jpg"
    ///  "VID-20161220-WA0001.mp4"
    ///  "20150905_183425.jpg".
    /// </summary>
    [UsedImplicitly]
    public class MobileFilenameDateTimeProvider : IPhotoDateTimeTakenProvider
    {
        public string Name => nameof(MobileFilenameDateTimeProvider);

        public uint Priority { get; } = 10;

        public bool CanProvideInformation(string filename)
        {
            return !string.IsNullOrWhiteSpace(filename);
        }

        public Task<Timestamp> ProvideAsync(string filename, Timestamp previousResult)
        {
            if (string.IsNullOrWhiteSpace(filename))
                return Task.FromResult(previousResult);

            filename = filename.Trim();

            try
            {
                // according to the description of GetFileName it can throw an Exception when invalid chars are used.
                // it looks like the 'promised' exception isn't thrown but the result is an empty string.
                // therefore, we check again for an empty string.
                filename = Path.GetFileName(filename);

                if (string.IsNullOrWhiteSpace(filename))
                    return Task.FromResult(previousResult);
            }
            catch (Exception)
            {
                // don't know how to cover this line ;-)
                return Task.FromResult(previousResult);
            }

            var result = TryGetFromFilename(filename);
            if (!result.HasValue)
                return Task.FromResult(previousResult);

            return Task.FromResult(new Timestamp(result.Value.Year, result.Value.Month, result.Value.Day));
        }

        // todo, improve
        private static DateTime? TryGetFromFilename(string filename)
        {
            if (string.IsNullOrWhiteSpace(filename))
                return null;

            var f = filename.Trim().ToUpper();

            f = f.Replace('-', ' ');
            f = f.Replace('_', ' ');

            if (f.StartsWith("IMG"))
            {
                f = f.Substring(3).Trim();
            }

            if (f.StartsWith("VID"))
            {
                f = f.Substring(3).Trim();
            }

            var r = new Regex("([0-9]{4})([0-9]{2})([0-9]{2}).*");
            var match = r.Match(f);
            if (!match.Success)
                return null;

            var year = Convert.ToInt32(match.Groups[1].Value);
            var month = Convert.ToInt32(match.Groups[2].Value);
            var day = Convert.ToInt32(match.Groups[3].Value);

            if (month == 0 || month > 12)
                return null;
            if (day == 0 | day > 31)
                return null;

            return new DateTime(year, month, day, 0, 0, 0);
        }
    }
}
